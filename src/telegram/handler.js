import { sendMessage, answerCallbackQuery } from './bot.js';
import { buildMainMenu, handleMenuAction } from './menu.js';
import { isOwner, fmtVN } from '../utils/time.js';
import { getConfig } from '../storage/configRepo.js';
import { getOnusMeta } from '../sources/onus/cache.js';

export async function handleMessageOrCallback(update) {
  if (update.message) {
    const m = update.message;
    const chatId = m.chat.id;
    if (!isOwner(chatId)) return sendMessage(chatId, 'Xin l·ªói, bot d√πng ri√™ng.');

    const text = (m.text || '').trim();

    if (text === '/start' || text === '/menu') {
      const menu = await buildMainMenu();
      return sendMessage(chatId, 'autiner s·∫µn s√†ng. Ch·ªçn thao t√°c b√™n d∆∞·ªõi.', { reply_markup: menu });
    }

    if (text === '/status') {
      const status = [
        '<b>Tr·∫°ng th√°i bot</b>',
        '‚Ä¢ Khung gi·ªù: 06:15‚Äì21:45 (30p); 06:00; 07:00; 22:00',
        '‚Ä¢ T·∫ßn su·∫•t: 30 ph√∫t',
        '‚Ä¢ Ngu·ªìn d·ªØ li·ªáu: ONUS (scrape + cache)'
      ].join('\n');
      return sendMessage(chatId, status);
    }

    if (text === '/source') {
      const cfg = await getConfig();
      const ex = cfg.active_exchange || 'ONUS';

      if (ex === 'ONUS') {
        const meta = getOnusMeta();
        const timeStr = meta.fetchedAt ? fmtVN(new Date(meta.fetchedAt)) : 'ch∆∞a c√≥';
        const age = meta.ageSec != null ? `${meta.ageSec}s` : 'N/A';
        const lines = [
          'üì° <b>Ngu·ªìn d·ªØ li·ªáu hi·ªán t·∫°i</b>',
          `‚Ä¢ S√†n ƒëang ch·ªçn: <b>${ex}</b>`,
          `‚Ä¢ L·∫ßn l·∫•y g·∫ßn nh·∫•t: <b>${timeStr}</b>`,
          `‚Ä¢ Tu·ªïi d·ªØ li·ªáu: <b>${age}</b>`,
          `‚Ä¢ C√≥ d·ªØ li·ªáu: <b>${meta.hasData ? 'C√≥' : 'Kh√¥ng'}</b>`
        ];
        return sendMessage(chatId, lines.join('\n'));
      }

      // MEXC/NAMI (ch∆∞a b·∫≠t ngu·ªìn th·∫≠t)
      const lines = [
        'üì° <b>Ngu·ªìn d·ªØ li·ªáu hi·ªán t·∫°i</b>',
        `‚Ä¢ S√†n ƒëang ch·ªçn: <b>${ex}</b>`,
        '‚Ä¢ Tr·∫°ng th√°i: <i>ƒëang ·ªü ch·∫ø ƒë·ªô mock d·ªØ li·ªáu</i>'
      ];
      return sendMessage(chatId, lines.join('\n'));
    }

    if (text === '/test_all') {
      const { runTestNow } = await import('../actions/testNow.js');
      await sendMessage(chatId, 'üîß ƒêang ch·∫°y 1 batch th·ª≠ ngay b√¢y gi·ªù‚Ä¶');
      await runTestNow();
      return;
    }

    return sendMessage(chatId, 'G√µ /menu ƒë·ªÉ m·ªü ƒëi·ªÅu khi·ªÉn, ho·∫∑c /status, /source ƒë·ªÉ xem t√¨nh tr·∫°ng.');
  }

  if (update.callback_query) {
    const cb = update.callback_query;
    const chatId = cb.message.chat.id;
    if (!isOwner(chatId)) {
      await answerCallbackQuery(cb.id);
      return sendMessage(chatId, 'Xin l·ªói, bot d√πng ri√™ng.');
    }
    await handleMenuAction(cb);
    await answerCallbackQuery(cb.id);
  }
}
