import pytz
from datetime import datetime, time as dt_time, timedelta
from telegram import Update, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler,
    ContextTypes, MessageHandler, filters
)

from settings import (
    TELEGRAM_BOT_TOKEN, ALLOWED_USER_ID, TZ_NAME, DEFAULT_UNIT,
    SLOT_TIMES, NUM_SCALPING
)
from .mexc_api import top_symbols, pick_scalping_signals, fmt_vnd_price, fmt_usd_price

VN_TZ = pytz.timezone(TZ_NAME)
_current_unit = DEFAULT_UNIT  # "VND" | "USD"

# ====== Buttons & menu ======
BTN_STATUS   = "üîé Tr·∫°ng th√°i"
BTN_TOP      = "üèÜ TOP 30 COIN"
BTN_TODAY    = "üìÖ H√¥m nay"
BTN_TOMORROW = "üìÖ Ng√†y mai"
BTN_WEEK     = "üìÖ C·∫£ tu·∫ßn"
BTN_TEST     = "üß™ Test"
BTN_VND      = "üí∞ MEXC VND"
BTN_USD      = "üíµ MEXC USD"

def main_menu_kb() -> ReplyKeyboardMarkup:
    # H√†ng 1: üîé Tr·∫°ng th√°i | TOP 30 COIN
    # H√†ng 2: üìÖ H√¥m nay | üìÖ Ng√†y mai
    # H√†ng 3: üìÖ C·∫£ tu·∫ßn | üß™ Test
    # H√†ng 4: üí∞ MEXC VND | üíµ MEXC USD
    keyboard = [
        [BTN_STATUS, BTN_TOP],
        [BTN_TODAY, BTN_TOMORROW],
        [BTN_WEEK, BTN_TEST],
        [BTN_VND, BTN_USD],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# ====== Helpers ======
def guard(update: Update) -> bool:
    return not (ALLOWED_USER_ID and update.effective_user and update.effective_user.id != ALLOWED_USER_ID)

def vn_now_str():
    now = datetime.now(VN_TZ)
    return now.strftime("%H:%M %d/%m/%Y")

def next_slot_info(now: datetime) -> tuple[str, int]:
    today = now.date()
    slots = []
    for hhmm in SLOT_TIMES:
        h, m = map(int, hhmm.split(":"))
        slots.append(VN_TZ.localize(datetime.combine(today, dt_time(h, m))))
    future = [s for s in slots if s > now]
    if future:
        nxt = future[0]
    else:
        h, m = map(int, SLOT_TIMES[0].split(":"))
        nxt = VN_TZ.localize(datetime.combine(today + timedelta(days=1), dt_time(h, m)))
    mins = max(0, int((nxt - now).total_seconds() // 60))
    return nxt.strftime("%H:%M"), mins

# ---------- TOP 30: ch·ªâ coin + gi√°, cƒÉn th·∫≥ng c·ªôt ----------
def _price_for(c: dict, unit: str) -> str:
    if unit == "VND":
        return fmt_vnd_price(c["lastPriceVND"])
    else:
        return fmt_usd_price(c["lastPrice"])

def _render_top_table(coins: list[dict], unit: str) -> str:
    rows = []
    max_price_len = 0
    for c in coins:
        sym = c["symbol"].replace("_USDT", "")
        price = _price_for(c, unit)
        chg = float(c.get("change24h_pct", 0.0))
        arrow = "üü¢" if chg > 0 else ("üî¥" if chg < 0 else "‚ö™")
        rows.append((sym, price, arrow))
        max_price_len = max(max_price_len, len(price))

    lines = [f"üìä TOP 30 Futures (MEXC) ‚Äî ƒê∆°n v·ªã: {unit}", ""]
    for sym, price, arrow in rows:
        sym_fixed = f"{sym:<6}"[:6]   # [ SYM  ]
        pad = " " * (max_price_len - len(price))
        lines.append(f"<code>[ {sym_fixed} ]  {arrow} {pad}{price}</code>")
    return "\n".join(lines)

# ---------------- Commands ----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not guard(update): 
        return
    await update.effective_chat.send_message(
        "üìã Menu ƒëi·ªÅu khi·ªÉn ‚Äî ch·ªçn ch·ª©c nƒÉng b√™n d∆∞·ªõi:",
        reply_markup=main_menu_kb()
    )

async def top_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not guard(update): return
    coins, live, _ = top_symbols(unit=_current_unit, topn=30)
    if not live or not coins:
        await update.effective_chat.send_message("‚ö†Ô∏è Hi·ªán kh√¥ng c√≥ d·ªØ li·ªáu. Th·ª≠ l·∫°i sau nh√©.")
        return
    text = _render_top_table(coins, _current_unit)
    await update.effective_chat.send_message(text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

async def set_usd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global _current_unit
    if not guard(update): return
    _current_unit = "USD"
    await update.effective_chat.send_message("‚úÖ ƒê√£ chuy·ªÉn ƒë∆°n v·ªã hi·ªÉn th·ªã sang **USD**.", parse_mode=ParseMode.MARKDOWN)

async def set_vnd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global _current_unit
    if not guard(update): return
    _current_unit = "VND"
    await update.effective_chat.send_message("‚úÖ ƒê√£ chuy·ªÉn ƒë∆°n v·ªã hi·ªÉn th·ªã sang **VND**.", parse_mode=ParseMode.MARKDOWN)

# ------------- G·ª≠i t√≠n hi·ªáu theo slot -------------
async def send_batch_scalping(context: ContextTypes.DEFAULT_TYPE):
    chat_id = ALLOWED_USER_ID
    signals, highlights, live, _ = pick_scalping_signals(_current_unit, NUM_SCALPING)

    if (not live) or (not signals):
        now = datetime.now(VN_TZ)
        nxt_hhmm, mins = next_slot_info(now)
        await context.bot.send_message(
            chat_id,
            f"‚ö†Ô∏è Slot {now.strftime('%H:%M')} kh√¥ng c√≥ t√≠n hi·ªáu.\n"
            f"‚Ü™Ô∏è D·ª± ki·∫øn slot ti·∫øp theo: **{nxt_hhmm}** ({mins} ph√∫t n·ªØa)."
        )
        return

    header = f"üìå T√≠n hi·ªáu {NUM_SCALPING} l·ªánh (Scalping) ‚Äî {vn_now_str()}"
    if highlights:
        header += "\n‚≠ê N·ªïi b·∫≠t: " + " | ".join(highlights[:3])
    await context.bot.send_message(chat_id, header)

    for s in signals:
        msg = (
            f"üìà {s['token']} ({s['unit']}) ‚Äî {'üü©' if s['side']=='LONG' else 'üü•'} {s['side']}\n\n"
            f"üü¢ Lo·∫°i l·ªánh: {s['type']}\n"
            f"üîπ Ki·ªÉu v√†o l·ªánh: {s['orderType']}\n"
            f"üí∞ Entry: {s['entry']}\n"
            f"üéØ TP: {s['tp']}\n"
            f"üõ°Ô∏è SL: {s['sl']}\n"
            f"üìä ƒê·ªô m·∫°nh: {s['strength']}%\n"
            f"üìå L√Ω do: {s['reason']}\n"
            f"üïí Th·ªùi gian: {vn_now_str()}"
        )
        await context.bot.send_message(chat_id, msg)

# ------------- Router cho menu -------------
async def on_menu_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global _current_unit
    if not guard(update) or not update.message:
        return
    text = (update.message.text or "").strip()

    if text == BTN_STATUS:
        _, live, _ = top_symbols(unit="USD", topn=1)
        await update.message.reply_text(f"üîé Tr·∫°ng th√°i: {'LIVE ‚úÖ' if live else 'DOWN ‚ùå'}")
        return

    if text == BTN_TOP:
        await top_cmd(update, context)
        return

    if text == BTN_VND:
        _current_unit = "VND"
        await update.message.reply_text("‚úÖ ƒê√£ chuy·ªÉn sang **VND**.", parse_mode=ParseMode.MARKDOWN)
        return

    if text == BTN_USD:
        _current_unit = "USD"
        await update.message.reply_text("‚úÖ ƒê√£ chuy·ªÉn sang **USD**.", parse_mode=ParseMode.MARKDOWN)
        return

    # L·ªãch (placeholder; b·∫°n n·ªëi ngu·ªìn th·∫≠t sau)
    if text == BTN_TODAY:
        await update.message.reply_text("üìÖ L·ªãch h√¥m nay: (r√∫t g·ªçn).")
        return
    if text == BTN_TOMORROW:
        await update.message.reply_text("üìÖ L·ªãch ng√†y mai: (r√∫t g·ªçn).")
        return
    if text == BTN_WEEK:
        await update.message.reply_text("üìÖ L·ªãch c·∫£ tu·∫ßn: (r√∫t g·ªçn).")
        return

    if text == BTN_TEST:
        await update.message.reply_text("[TEST] Format & Scheduler ok.")
        return

# ---------------- Bootstrap ----------------
def build_app() -> Application:
    app: Application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("top", top_cmd))
    app.add_handler(CommandHandler("usd", set_usd))
    app.add_handler(CommandHandler("vnd", set_vnd))

    # B·∫Øt text th∆∞·ªùng ƒë·ªÉ x·ª≠ l√Ω menu
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), on_menu_click))

    # L√™n l·ªãch g·ª≠i t√≠n hi·ªáu m·ªói slot
    j = app.job_queue
    for hhmm in SLOT_TIMES:
        h, m = map(int, hhmm.split(":"))
        j.run_daily(send_batch_scalping, time=dt_time(h, m, tzinfo=VN_TZ))

    return app
