from typing import List, Dict
from common.time_utils import fmt_vn
from adapters.exchanges.onus_futures import batch_signals, top_volume_symbols

def format_signal(sig: Dict) -> str:
    side_icon = "üü©" if sig["side"] == "LONG" else "üü•"
    type_icon = "üü¢" if sig["type"].lower() == "scalping" else "üîµ"

    if sig["strength"] >= 70:
        strength_label = "M·∫°nh"
    elif sig["strength"] >= 50:
        strength_label = "Ti√™u chu·∫©n"
    else:
        strength_label = "Tham kh·∫£o"

    return (
        f"üìà {sig['symbol']}(VND) ‚Äî {side_icon} {sig['side']}\n\n"
        f"{type_icon} Lo·∫°i l·ªánh: {sig['type']}\n"
        f"üîπ Ki·ªÉu v√†o l·ªánh: {sig['orderType']}\n"
        f"üí∞ Entry: {sig['entry']:,}\n"
        f"üéØ TP: {sig['tp']:,}\n"
        f"üõ°Ô∏è SL: {sig['sl']:,}\n"
        f"üìä ƒê·ªô m·∫°nh: {sig['strength']}% ({strength_label})\n"
        f"üìå L√Ω do: Funding={sig.get('funding','-')}, "
        f"Vol5m={sig.get('vol_mult','-')}, "
        f"RSI={sig.get('rsi','-')}, "
        f"EMA9={sig.get('ema9','-')}, "
        f"EMA21={sig.get('ema21','-')}\n"
        f"üïí Th·ªùi gian: {fmt_vn(sig['ts'])}"
    )

def get_batch_messages() -> List[str]:
    """Tr·∫£ v·ªÅ danh s√°ch message ƒë√£ format (5 t√≠n hi·ªáu: 3 Scalping + 2 Swing)."""
    symbols = top_volume_symbols(limit=10)
    sigs: List[Dict] = batch_signals(symbols)
    return [format_signal(s) for s in sigs]
