from telegram import Bot
from autiner_bot.settings import S
from autiner_bot.utils.state import get_state
from autiner_bot.utils.time_utils import get_vietnam_time
from autiner_bot.data_sources.mexc import (
    get_usdt_vnd_rate,
    analyze_coin_signal_v2,
    get_top20_futures,
)
from autiner_bot.jobs.daily_reports import job_morning_message, job_evening_summary

import traceback
import pytz
import random
from datetime import time

bot = Bot(token=S.TELEGRAM_BOT_TOKEN)

# L∆∞u l·∫ßn ch·ªçn tr∆∞·ªõc ƒë√≥ ƒë·ªÉ tr√°nh tr√πng
_last_selected = []


# =============================
# Format gi√°
# =============================
def format_price(value: float, currency: str = "USD", vnd_rate: float | None = None) -> str:
    try:
        if currency == "VND":
            if not vnd_rate or vnd_rate <= 0:
                return "N/A VND"
            value = value * vnd_rate

            s = f"{value:.10f}".rstrip("0").rstrip(".")
            if "." in s:
                int_part, dec_part = s.split(".")
                int_part = f"{int(int_part):,}".replace(",", ".")
                s = f"{int_part}.{dec_part}"
            else:
                s = f"{int(s):,}".replace(",", ".")
            return s
        else:  # USD
            s = f"{value:.6f}".rstrip("0").rstrip(".")
            if float(s) >= 1:
                if "." in s:
                    int_part, dec_part = s.split(".")
                    int_part = f"{int(int_part):,}".replace(",", ".")
                    s = f"{int_part}.{dec_part}"
                else:
                    s = f"{int(s):,}".replace(",", ".")
            return s
    except Exception:
        return str(value)


# =============================
# Notice tr∆∞·ªõc khi ra t√≠n hi·ªáu
# =============================
async def job_trade_signals_notice(_=None):
    try:
        state = get_state()
        if not state["is_on"]:
            return
        await bot.send_message(
            chat_id=S.TELEGRAM_ALLOWED_USER_ID,
            text="‚è≥ 1 ph√∫t n·ªØa s·∫Ω c√≥ t√≠n hi·ªáu giao d·ªãch, chu·∫©n b·ªã s·∫µn s√†ng nh√©!"
        )
    except Exception as e:
        print(f"[ERROR] job_trade_signals_notice: {e}")


# =============================
# T·∫°o t√≠n hi·ªáu giao d·ªãch
# =============================
async def create_trade_signal(coin: dict, mode: str = "SCALPING", currency_mode="USD", vnd_rate=None):
    try:
        signal = await analyze_coin_signal_v2(coin)

        entry_price = format_price(signal["entry"], currency_mode, vnd_rate)
        tp_price = format_price(signal["tp"], currency_mode, vnd_rate)
        sl_price = format_price(signal["sl"], currency_mode, vnd_rate)

        symbol_display = coin["symbol"].replace("_USDT", f"/{currency_mode.upper()}")
        side_icon = "üü© LONG" if signal["direction"] == "LONG" else "üü• SHORT"

        if signal["strength"] >= 70:
            label = "‚≠ê T√çN HI·ªÜU M·∫†NH ‚≠ê"
        elif signal["strength"] <= 60:
            label = "‚ö†Ô∏è THAM KH·∫¢O ‚ö†Ô∏è"
        else:
            label = ""

        msg = (
            f"{label}\n"
            f"üìà {symbol_display}\n"
            f"{side_icon}\n"
            f"üìå Ch·∫ø ƒë·ªô: {mode.upper()}\n"
            f"üìë Lo·∫°i l·ªánh: {signal['orderType']}\n"
            f"üí∞ Entry: {entry_price} {currency_mode}\n"
            f"üéØ TP: {tp_price} {currency_mode}\n"
            f"üõ°Ô∏è SL: {sl_price} {currency_mode}\n"
            f"üìä ƒê·ªô m·∫°nh: {signal['strength']}%\n"
            f"üìå L√Ω do:\n{signal['reason']}\n"
            f"üïí {get_vietnam_time().strftime('%H:%M %d/%m/%Y')}"
        )
        return msg
    except Exception as e:
        print(f"[ERROR] create_trade_signal: {e}")
        print(traceback.format_exc())
        return "‚ö†Ô∏è Kh√¥ng t·∫°o ƒë∆∞·ª£c t√≠n hi·ªáu cho coin n√†y."


# =============================
# G·ª≠i t√≠n hi·ªáu giao d·ªãch
# =============================
async def job_trade_signals(_=None):
    global _last_selected
    try:
        state = get_state()
        if not state["is_on"]:
            return

        currency_mode = state.get("currency_mode", "USD")
        vnd_rate = None
        if currency_mode == "VND":
            vnd_rate = await get_usdt_vnd_rate()
            if not vnd_rate or vnd_rate <= 0:
                await bot.send_message(
                    chat_id=S.TELEGRAM_ALLOWED_USER_ID,
                    text="‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c t·ª∑ gi√° USDT/VND. T√≠n hi·ªáu b·ªã h·ªßy."
                )
                return

        # L·∫•y top 20 coin futures
        all_coins = await get_top20_futures(limit=20)
        if not all_coins:
            await bot.send_message(
                chat_id=S.TELEGRAM_ALLOWED_USER_ID,
                text="‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu coin t·ª´ s√†n."
            )
            return

        # Lu√¥n gi·ªØ BTC v√† ETH
        selected = [c for c in all_coins if c["symbol"] in ["BTC_USDT", "ETH_USDT"]]

        # ∆Øu ti√™n coin bi·∫øn ƒë·ªông m·∫°nh (>5%)
        volatile = [c for c in all_coins if abs(c["change_pct"]) >= 5 and c["symbol"] not in ["BTC_USDT", "ETH_USDT"]]

        # Lo·∫°i coin ƒë√£ ch·ªçn ·ªü l·∫ßn tr∆∞·ªõc ƒë·ªÉ tr√°nh l·∫∑p
        volatile = [c for c in volatile if c["symbol"] not in _last_selected]
        remaining = [c for c in all_coins if c["symbol"] not in _last_selected and c["symbol"] not in ["BTC_USDT", "ETH_USDT"]]

        # B·ªï sung coin cho ƒë·ªß 5
        while len(selected) < 5:
            if volatile:
                selected.append(volatile.pop(0))
            elif remaining:
                choice = random.choice(remaining)
                selected.append(choice)
                remaining.remove(choice)
            else:
                break  # h·∫øt coin th√¨ tho√°t

        # L∆∞u l·∫°i l·∫ßn ch·ªçn n√†y (gi·ªØ t·ªëi ƒëa 10 ƒë·ªÉ tr√°nh b√≠)
        _last_selected = ([c["symbol"] for c in selected] + _last_selected)[:10]

        print(f"[DEBUG] Selected {len(selected)} coins:")
        for c in selected:
            print(f" -> {c['symbol']} | vol={c['volume']} | change={c['change_pct']}")

        # 3 Scalping (BTC, ETH, 1 coin kh√°c) + 2 Swing
        for i, coin in enumerate(selected):
            try:
                mode = "SCALPING" if i < 3 else "SWING"
                msg = await create_trade_signal(coin, mode, currency_mode, vnd_rate)
                await bot.send_message(chat_id=S.TELEGRAM_ALLOWED_USER_ID, text=msg)
            except Exception as e:
                print(f"[ERROR] g·ª≠i t√≠n hi·ªáu coin {coin.get('symbol')}: {e}")
                continue

    except Exception as e:
        print(f"[ERROR] job_trade_signals: {e}")
        print(traceback.format_exc())


# =============================
# ƒêƒÉng k√Ω c√°c job s√°ng/t·ªëi + notice + signals
# =============================
def register_daily_jobs(job_queue):
    tz = pytz.timezone("Asia/Ho_Chi_Minh")

    job_queue.run_daily(job_morning_message, time=time(hour=6, minute=0, tzinfo=tz), name="morning_report")
    job_queue.run_daily(job_evening_summary, time=time(hour=22, minute=0, tzinfo=tz), name="evening_report")

    job_queue.run_repeating(
        job_trade_signals_notice,
        interval=1800,
        first=time(hour=6, minute=14, tzinfo=tz),
        name="trade_signals_notice"
    )

    job_queue.run_repeating(
        job_trade_signals,
        interval=1800,
        first=time(hour=6, minute=15, tzinfo=tz),
        name="trade_signals"
    )
