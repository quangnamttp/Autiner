import cron from 'node-cron';
import { sendMessage } from '../telegram/bot.js';
import { getConfig } from '../storage/configRepo.js';
import { batchHeader, signalMessage } from '../telegram/format.js';
import { pickTop5SignalsFromOnus } from '../signals/generator.js';
import { startOnusPoller, getOnusSnapshotCached } from '../sources/onus/cache.js';
import { logSourceError } from '../storage/errorRepo.js';

const CHAT_ID = process.env.ALLOWED_TELEGRAM_USER_ID;
const TZ = process.env.TZ || 'Asia/Ho_Chi_Minh';

let isBatchRunning = false;
let lastOnusAlertAt = 0;

function nextSlotString(date = new Date()) {
  const d = new Date(date);
  const m = d.getMinutes();
  const add = m < 15 ? (15 - m) : m < 45 ? (45 - m) : (60 - m);
  d.setMinutes(m + add, 0, 0);
  const hh = String(d.getHours()).padStart(2, '0');
  const mm = String(d.getMinutes()).padStart(2, '0');
  return `${hh}:${mm}`;
}

export function startSchedulers() {
  // Poll ONUS n·ªÅn ƒë·ªÉ lu√¥n c√≥ snapshot g·∫ßn nh·∫•t
  startOnusPoller({ intervalMs: 20000 });

  // 06:00 ‚Äî ch√†o s√°ng
  cron.schedule('0 6 * * *', async () => {
    if (!CHAT_ID) return;
    await sendMessage(
      CHAT_ID,
      'Ch√†o bu·ªïi s√°ng nh√© b·∫°n ‚òÄÔ∏è\n‚Ä¢ Top 5 tƒÉng: (s·∫Ω g·∫Øn d·ªØ li·ªáu s√†n)\n‚Ä¢ Funding/Volume/Xu h∆∞·ªõng: ...\n‚Ä¢ Xu h∆∞·ªõng h√¥m nay: <b>TƒÇNG/GI·∫¢M/TRUNG L·∫¨P</b>  üü© TƒÉng X%  |  üü• Gi·∫£m Y% (theo s√†n, khung 4h)\n(1 USD ‚âà X <b>VND</b> ‚Ä¢ 06:00)'
    );
  }, { timezone: TZ });

  // 07:00 ‚Äî l·ªãch vƒ© m√¥
  cron.schedule('0 7 * * *', async () => {
    if (!CHAT_ID) return;
    await sendMessage(CHAT_ID, 'üìÖ 07:00 L·ªãch vƒ© m√¥ (s·∫Ω l·∫•y t·ª´ ForexFactory, l·ªçc high impact).');
  }, { timezone: TZ });

  // 06:15 ‚Üí 21:45 ‚Äî m·ªói 30'
  cron.schedule('15,45 6-21 * * *', async () => {
    if (!CHAT_ID) return;
    if (isBatchRunning) return;
    isBatchRunning = true;

    try {
      const cfg = await getConfig();
      const ex = cfg.active_exchange || 'ONUS';
      const nextTime = nextSlotString();

      await sendMessage(CHAT_ID, batchHeader(nextTime, ex));

      if (ex === 'ONUS') {
        try {
          const snapshot = await getOnusSnapshotCached({ maxAgeSec: 120, quickRetries: 3 });
          const signals = pickTop5SignalsFromOnus(snapshot);
          if (!signals.length) throw new Error('Kh√¥ng c√≥ t√≠n hi·ªáu ph√π h·ª£p.');

          for (const s of signals) {
            await sendMessage(CHAT_ID, signalMessage(s));
            await new Promise(r => setTimeout(r, 250));
          }
        } catch (err) {
          const msg = String(err?.message || err);
          await logSourceError('ONUS', msg); // ‚¨Ö ghi log l·ªói v√†o DB

          const now = Date.now();
          if (now - lastOnusAlertAt > 10 * 60 * 1000) {
            lastOnusAlertAt = now;
            await sendMessage(
              CHAT_ID,
              `‚ö†Ô∏è Onus d·ªØ li·ªáu kh√¥ng ƒë·∫°t chu·∫©n (${msg}).\nƒê√£ c·ªë g·∫Øng l·∫•y d·ªØ li·ªáu trong 30p v·ª´a qua nh∆∞ng th·∫•t b·∫°i.\nG√µ /source ƒë·ªÉ ki·ªÉm tra tu·ªïi d·ªØ li·ªáu.`
            );
          }
          return;
        }
      } else {
        // Ch∆∞a b·∫≠t d·ªØ li·ªáu th·∫≠t cho MEXC/NAMI
        await sendMessage(CHAT_ID, '‚ö†Ô∏è Ch·∫ø ƒë·ªô mock d·ªØ li·ªáu cho s√†n kh√°c.');
      }
    } finally {
      isBatchRunning = false;
    }
  }, { timezone: TZ });

  // 22:00 ‚Äî t·ªïng k·∫øt
  cron.schedule('0 22 * * *', async () => {
    if (!CHAT_ID) return;
    await sendMessage(CHAT_ID, 'üåô T·ªïng k·∫øt h√¥m nay\n‚Ä¢ TP: x | SL: y | Tho√°t: z\n‚Ä¢ BUY: a ‚Äî SELL: b\nNg·ªß ngon nha!');
  }, { timezone: TZ });
}
