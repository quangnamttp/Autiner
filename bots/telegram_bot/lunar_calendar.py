# -*- coding: utf-8 -*-
from datetime import date, timedelta
from lunardate import LunarDate

VN_WEEK = ["T2", "T3", "T4", "T5", "T6", "T7", "CN"]

def _lunar_day_str(g: date) -> str:
    try:
        ld = LunarDate.fromSolarDate(g.year, g.month, g.day)
        # v√≠ d·ª•: 8/6 (m√πng 8 th√°ng 6 √¢m)
        return f"{ld.day}/{ld.month}"
    except Exception:
        return "--/--"

def calendar_month_text(target: date) -> str:
    """
    Tr·∫£ v·ªÅ l·ªãch th√°ng d·∫°ng text:
    - Ti√™u ƒë·ªÅ: TH√ÅNG mm/yyyy
    - 7 c·ªôt T2..CN
    - M·ªói √¥: d∆∞∆°ng **DD** + d√≤ng d∆∞·ªõi √¢m dd/mm
    """
    first = target.replace(day=1)
    # th·ª© trong tu·∫ßn (Mon=0..Sun=6) ‚Üí mu·ªën c·ªôt b·∫Øt ƒë·∫ßu t·ª´ T2 (Mon)
    pad = first.weekday()  # 0..6

    # s·ªë ng√†y trong th√°ng
    if first.month == 12:
        next_first = first.replace(year=first.year + 1, month=1, day=1)
    else:
        next_first = first.replace(month=first.month + 1, day=1)
    last_day = (next_first - timedelta(days=1)).day

    # header
    lines = []
    lines.append(f"üìÖ TH√ÅNG {first.month:02d}/{first.year}")
    lines.append(" ".join([f"{w:^6}" for w in VN_WEEK]))

    # build cells (6 h√†ng t·ªëi ƒëa)
    cells = ["      "] * pad
    for d in range(1, last_day + 1):
        g = first.replace(day=d)
        dduong = f"**{d:02d}**"  # in ƒë·∫≠m ng√†y d∆∞∆°ng
        dam = _lunar_day_str(g)
        cell = f"{dduong}\n{dam:>6}"
        cells.append(cell)

    # nh√≥m 7 c·ªôt
    for i in range(0, len(cells), 7):
        row = cells[i:i+7]
        # cƒÉn m·ªói √¥ b·ªÅ r·ªông 8 k√Ω t·ª±, t√°ch b·∫±ng 2 kho·∫£ng tr·∫Øng
        lines.append("  ".join(f"{c:<8}" for c in row))

    return "\n".join(lines)
