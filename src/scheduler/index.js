// src/scheduler/index.js
import cron from 'node-cron';
import { sendMessage } from '../telegram/bot.js';
import { getConfig } from '../storage/configRepo.js';
import { batchHeader, signalMessage } from '../telegram/format.js';
import { pickSignals } from '../signals/generator.js';
import {
  startOnusPoller,
  getOnusSnapshotCached,
  getOnusLastGood,
  getOnusMeta
} from '../sources/onus/cache.js';
import { logSourceError } from '../storage/errorRepo.js';

const CHAT_ID = process.env.ALLOWED_TELEGRAM_USER_ID;
const TZ = process.env.TZ || 'Asia/Ho_Chi_Minh';

let isBatchRunning = false;
let lastAlertAt = 0;

function nextSlotString(date = new Date()) {
  const d = new Date(date);
  const m = d.getMinutes();
  const add = m < 15 ? (15 - m) : m < 45 ? (45 - m) : (60 - m);
  d.setMinutes(m + add, 0, 0);
  const hh = String(d.getHours()).padStart(2, '0');
  const mm = String(d.getMinutes()).padStart(2, '0');
  return `${hh}:${mm}`;
}

export function startSchedulers() {
  // Kh·ªüi ƒë·ªông poll ONUS (s√†n ƒë√£ c√≥ d·ªØ li·ªáu th·∫≠t)
  startOnusPoller({ intervalMs: 20000 });

  // 06:00 ‚Äî ch√†o s√°ng
  cron.schedule('0 6 * * *', async () => {
    if (!CHAT_ID) return;
    await sendMessage(
      CHAT_ID,
      'Ch√†o bu·ªïi s√°ng nh√© b·∫°n ‚òÄÔ∏è\n‚Ä¢ Top 5 tƒÉng: (s·∫Ω g·∫Øn d·ªØ li·ªáu s√†n)\n‚Ä¢ Funding/Volume/Xu h∆∞·ªõng: ...\n‚Ä¢ Xu h∆∞·ªõng h√¥m nay: <b>TƒÇNG/GI·∫¢M/TRUNG L·∫¨P</b>  üü© TƒÉng X%  |  üü• Gi·∫£m Y% (theo s√†n, khung 4h)\n(1 USD ‚âà X <b>VND</b> ‚Ä¢ 06:00)'
    );
  }, { timezone: TZ });

  // 07:00 ‚Äî l·ªãch vƒ© m√¥
  cron.schedule('0 7 * * *', async () => {
    if (!CHAT_ID) return;
    await sendMessage(CHAT_ID, 'üìÖ 07:00 L·ªãch vƒ© m√¥ (s·∫Ω l·∫•y t·ª´ ForexFactory, l·ªçc high impact).');
  }, { timezone: TZ });

  // 06:15 ‚Üí 21:45 ‚Äî m·ªói 30'
  cron.schedule('15,45 6-21 * * *', async () => {
    if (!CHAT_ID) return;
    if (isBatchRunning) return;
    isBatchRunning = true;

    try {
      const cfg = await getConfig();
      const ex = (cfg.active_exchange || 'ONUS').toUpperCase(); // ONUS/MEXC/NAMI
      const nextTime = nextSlotString();
      await sendMessage(CHAT_ID, batchHeader(nextTime, ex));

      if (ex === 'ONUS') {
        let staleNote = '';
        try {
          const metaBefore = getOnusMeta();
          const freshRows = await getOnusSnapshotCached({ maxAgeSec: 120, quickRetries: 3 });
          const metaAfter = getOnusMeta();
          if (metaAfter.ageSec && metaAfter.ageSec > 120) {
            staleNote = `\n(‚ÑπÔ∏è D√πng snapshot ONUS c≈© ~${metaAfter.ageSec}s)`;
          } else if (metaBefore.fetchedAt && metaAfter.fetchedAt === metaBefore.fetchedAt && metaAfter.ageSec > 120) {
            staleNote = `\n(‚ÑπÔ∏è D√πng snapshot ONUS c≈© ~${metaAfter.ageSec}s)`;
          }

          // ∆ØU TI√äN ƒë·ªß 5 k√®o
          let signals = pickSignals(freshRows, 5, 'VND');

          // B∆Ø·ªöC B√ô t·ª´ last-good (‚â§60‚Äô) ‚Äì v·∫´n l√† ONUS, kh√¥ng l·∫•y ch√©o
          if (signals.length < 5) {
            const last = getOnusLastGood();
            if (last && (Date.now() - last.fetchedAt) / 1000 <= 3600) {
              const used = new Set(signals.map(s => s.symbol));
              const extraRows = (last.rows || []).filter(r => !used.has(r.symbol));
              if (extraRows.length) {
                const extra = pickSignals(extraRows, 5 - signals.length, 'VND');
                for (const e of extra) e.reason = (e.reason ? e.reason + ' ' : '') + '‚Ä¢ ngu·ªìn: snapshot c≈©';
                signals = signals.concat(extra);
              }
            }
          }

          // N·∫øu v·∫´n kh√¥ng ƒë·ªß 5 nh∆∞ng c√≥ ‚â•3 ‚Üí v·∫´n g·ª≠i
          if (signals.length >= 3) {
            for (const s of signals) {
              await sendMessage(CHAT_ID, signalMessage(s));
              await new Promise(r => setTimeout(r, 200));
            }
            if (staleNote) await sendMessage(CHAT_ID, staleNote);
            return;
          }

          // <3 k√®o ‚Üí c·∫£nh b√°o & b·ªè batch (an to√†n)
          throw new Error(`Kh√¥ng ƒë·ªß t√≠n hi·ªáu (c√≥ ${signals.length}/5, y√™u c·∫ßu t·ªëi thi·ªÉu 3)`);
        } catch (err) {
          const msg = String(err?.message || err);
          await logSourceError('ONUS', msg);

          const now = Date.now();
          if (now - lastAlertAt > 10 * 60 * 1000) {
            lastAlertAt = now;
            await sendMessage(
              CHAT_ID,
              `‚ö†Ô∏è ONUS kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t·∫°o 3 t√≠n hi·ªáu t·ªëi thi·ªÉu (${msg}).\nG√µ /source ƒë·ªÉ ki·ªÉm tra tu·ªïi d·ªØ li·ªáu.`
            );
          }
          return;
        }
      }

      // C√°c s√†n kh√°c (MEXC/NAMI) ‚Äî KH√îNG l·∫•y ch√©o. N·∫øu ch∆∞a c·∫•u h√¨nh d·ªØ li·ªáu th·∫≠t, b√°o r√µ & b·ªè batch.
      if (ex === 'MEXC' || ex === 'NAMI') {
        await sendMessage(
          CHAT_ID,
          `‚ö†Ô∏è S√†n ${ex} ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ngu·ªìn d·ªØ li·ªáu th·∫≠t. B·ªè batch ƒë·ªÉ tr√°nh sai gi√°.`
        );
        return;
      }
    } finally {
      isBatchRunning = false;
    }
  }, { timezone: TZ });

  // 22:00 ‚Äî t·ªïng k·∫øt
  cron.schedule('0 22 * * *', async () => {
    if (!CHAT_ID) return;
    await sendMessage(CHAT_ID, 'üåô T·ªïng k·∫øt h√¥m nay\n‚Ä¢ TP: x | SL: y | Tho√°t: z\n‚Ä¢ BUY: a ‚Äî SELL: b\nNg·ªß ngon nha!');
  }, { timezone: TZ });
}
